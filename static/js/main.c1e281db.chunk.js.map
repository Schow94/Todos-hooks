{"version":3,"sources":["hooks/useInputState.js","reducers/todo.reducer.js","context/todos.context.js","reducers/useLocalStorageReducer.js","EditTodoForm.js","Todo.js","hooks/useToggleState.js","TodoList.js","TodoForm.js","hooks/useTodoState.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["initialVal","useState","value","setValue","e","target","reducer","state","action","type","id","uuid","task","completed","filter","todo","map","newTask","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","key","defaultVal","useReducer","val","JSON","parse","window","localStorage","getItem","String","dispatch","useEffect","setItem","stringify","useLocalStorageReducer","todoReducer","todos","Provider","children","TodoForm","toggleEditForm","useInputState","handleChange","reset","useContext","onSubmit","preventDefault","style","margin","width","TextField","onChange","fullWidth","autoFocus","memo","setState","useToggleState","isEditing","toggle","ListItem","height","Checkbox","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","length","Paper","List","i","Divider","padding","label","TodoApp","backgroundColor","fontFamily","elevation","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c1e281db.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport default initialVal => {\n  const [value, setValue] = useState(initialVal);\n\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n\n  const reset = () => {\n    setValue('');\n  };\n\n  return [value, handleChange, reset];\n};\n","import uuid from 'uuid/v4';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD':\n      return [...state, { id: uuid(), task: action.task, completed: false }];\n    case 'REMOVE':\n      return state.filter(todo => todo.id !== action.id);\n    case 'TOGGLE':\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n      );\n    case 'EDIT':\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, task: action.newTask } : todo\n      );\n    default:\n      return state;\n  }\n};\n\n// addTodo: newTodoText => {\n//   setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\n// },\n\n// removeTodo: todoId => {\n//   const updatedTodos = todos.filter(todo => todo.id !== todoId);\n//   setTodos(updatedTodos);\n// },\n\n// toggleCompletion: todoId => {\n//   const updatedTodos = todos.map(todo =>\n//     todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\n//   );\n//   setTodos(updatedTodos);\n// },\n\n// editTodo: (todoId, newTask) => {\n//   const updatedTodos = todos.map(todo =>\n//     todo.id === todoId ? { ...todo, task: newTask } : todo\n//   );\n//   setTodos(updatedTodos);\n// }\n\nexport default reducer;\n","import React, { createContext } from 'react';\nimport uuid from 'uuid/v4';\nimport { useLocalStorageReducer } from '../reducers/useLocalStorageReducer';\nimport todoReducer from '../reducers/todo.reducer';\n\nconst defaultTodos = [\n  { id: uuid(), task: 'Clean Fishtank', completed: false },\n  { id: uuid(), task: 'Wash Car', completed: true },\n  { id: uuid(), task: 'Grow Beard', completed: false }\n];\n\nexport const TodosContext = createContext(defaultTodos);\nexport const DispatchContext = createContext();\n\nexport function TodosProvider(props) {\n  const [todos, dispatch] = useLocalStorageReducer(\n    'todos',\n    defaultTodos,\n    todoReducer\n  );\n\n  return (\n    //CREATES A NEW OBJ SO COMPONENT RERENDERS\n    //value = {{todos}}\n\n    //SIMPLY PASSING IN TODOS, BUT NOT UPDATING\n    //value={todos}\n    <TodosContext.Provider value={todos}>\n      <DispatchContext.Provider value={dispatch}>\n        {props.children}\n      </DispatchContext.Provider>\n    </TodosContext.Provider>\n  );\n}\n","import { useReducer, useEffect } from 'react';\n\nexport default function useLocalStorageReducer(key, defaultVal, reducer) {\n  const [state, dispatch] = useReducer(reducer, defaultVal, () => {\n    let val;\n    try {\n      val = JSON.parse(window.localStorage.getItem(key) || String(defaultVal));\n    } catch (e) {\n      val = defaultVal;\n    }\n    return val;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state]);\n\n  return [state, dispatch];\n}\n\nexport { useLocalStorageReducer };\n","import React, { useContext } from 'react';\n\nimport useInputState from './hooks/useInputState';\nimport TextField from '@material-ui/core/TextField';\nimport { DispatchContext } from './context/todos.context';\n\nexport default function TodoForm({ id, task, toggleEditForm }) {\n  const [value, handleChange, reset] = useInputState(task);\n  const dispatch = useContext(DispatchContext);\n\n  const handleEditSubmit = e => {\n    e.preventDefault();\n    dispatch({ type: 'EDIT', id: id, newTask: task });\n    reset();\n    toggleEditForm();\n  };\n\n  return (\n    <form onSubmit={handleEditSubmit} style={{ margin: '1rem', width: '50%' }}>\n      <TextField\n        margin=\"normal\"\n        value={value} \n        onChange={handleChange}\n        fullWidth\n        autoFocus\n      />\n    </form>\n  );\n}\n","import React, { useContext, memo } from 'react';\n\nimport useToggleState from './hooks/useToggleState';\n\nimport EditTodoForm from './EditTodoForm';\nimport { DispatchContext } from './context/todos.context';\n\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nfunction Todo({ task, id, completed }) {\n  const dispatch = useContext(DispatchContext);\n\n  const [isEditing, toggle] = useToggleState(false);\n\n  return (\n    <ListItem style={{ height: '60px' }}>\n      {isEditing ? (\n        <EditTodoForm id={id} task={task} toggleEditForm={toggle} />\n      ) : (\n        <>\n          <Checkbox\n            tabIndex={-1}\n            checked={completed}\n            onClick={() => dispatch({ type: 'TOGGLE', id: id })}\n          />\n          <ListItemText\n            style={{ textDecoration: completed ? 'line-through' : 'none' }}\n          >\n            {task}\n          </ListItemText>\n          <ListItemSecondaryAction>\n            <IconButton\n              aria-label=\"Delete\"\n              onClick={() => dispatch({ type: 'REMOVE', id: id })}\n            >\n              <DeleteIcon />\n            </IconButton>\n            <IconButton aria-label=\"Edit\" onClick={toggle}>\n              <EditIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </>\n      )}\n    </ListItem>\n  );\n}\nexport default memo(Todo);\n","import { useState } from 'react';\n\nexport default function useToggle(initialVal) {\n  const [state, setState] = useState(initialVal);\n\n  const toggle = () => {\n    setState(!state);\n  };\n  return [state, toggle];\n}\n","import React, { useContext } from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\n\nimport Todo from './Todo';\nimport { TodosContext } from './context/todos.context';\n\nexport default function TodoList() {\n  const todos = useContext(TodosContext);\n  if (todos.length)\n    return (\n      <Paper>\n        <List>\n          {todos.map((todo, i) => (\n            <>\n              <Todo {...todo} />\n              {i < todos.length - 1 && <Divider />}\n            </>\n          ))}\n        </List>\n      </Paper>\n    );\n  return null;\n}\n","import React, { useContext } from 'react';\n\nimport useInputState from './hooks/useInputState';\nimport { DispatchContext } from './context/todos.context';\n\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\n\nexport default function TodoForm() {\n  const [value, handleChange, reset] = useInputState('');\n  const dispatch = useContext(DispatchContext);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch({ type: 'ADD', task: value });\n    reset();\n  };\n\n  return (\n    <Paper style={{ margin: '1rem 0', padding: '0 1rem' }}>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          value={value}\n          type=\"text\"\n          onChange={handleChange}\n          margin=\"normal\"\n          label=\"Add New Todo\"\n          fullWidth\n        />\n      </form>\n    </Paper>\n  );\n}\n","import useLocalStorageState from './useLocalStorageState';\nimport uuid from 'uuid/v4';\n\nexport default initialTodos => {\n  const [todos, setTodos] = useLocalStorageState('todos', initialTodos);\n\n  return {\n    todos,\n\n    addTodo: newTodoText => {\n      setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\n    },\n\n    removeTodo: todoId => {\n      const updatedTodos = todos.filter(todo => todo.id !== todoId);\n      setTodos(updatedTodos);\n    },\n\n    toggleCompletion: todoId => {\n      const updatedTodos = todos.map(todo =>\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\n      );\n      setTodos(updatedTodos);\n    },\n\n    editTodo: (todoId, newTask) => {\n      const updatedTodos = todos.map(todo =>\n        todo.id === todoId ? { ...todo, task: newTask } : todo\n      );\n      setTodos(updatedTodos);\n    }\n  };\n};\n","import React from 'react';\n\nimport uuid from 'uuid/v4';\n\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Appbar from '@material-ui/core/Appbar';\nimport Toolbar from '@material-ui/core/ToolBar';\n\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\n\nimport { TodosProvider } from './context/todos.context';\nimport useTodoState from './hooks/useTodoState';\n\nimport Grid from '@material-ui/core/Grid';\n\nexport default function TodoApp() {\n  // console.log(todos);\n\n  // If you wanted, you can extract out add,remove,toggletodo, and edit\n  // to their own custom hook to clean up TodoApp.js file\n\n  //setInput & useToggle are already custom hooks that we need for our input\n\n  return (\n    <Paper\n      style={{\n        padding: 0,\n        margin: 0,\n        height: '100vn',\n        backgroundColor: '#fafafa',\n        fontFamily: 'Roboto'\n      }}\n      elevation={0}\n    >\n      <Appbar color=\"primary\" position=\"static\" style={{ height: '64px' }}>\n        <Toolbar>\n          <Typography color=\"inherit\">TODOS with HOOKs</Typography>\n        </Toolbar>\n      </Appbar>\n      <Grid container justify=\"center\" style={{ marginTop: '1rem' }}>\n        <Grid item xs={11} md={8} lg={4}>\n          <TodosProvider>\n            <TodoForm />\n            <TodoList />\n          </TodosProvider>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n}\n","import React, { Component } from 'react';\nimport TodoApp from './TodoApp';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <TodoApp />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n"],"sourceRoot":""}